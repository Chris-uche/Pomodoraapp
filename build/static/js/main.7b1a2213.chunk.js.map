{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["padTimer","timer","toString","padStart","App","useState","title","setTitle","timeLeft","setTimer","isRuning","setRuning","minutes","Math","floor","seconds","intervalRef","useRef","resetTimer","clearInterval","current","className","onClick","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAGMA,EAAS,SAACC,GACd,OAAOA,EAAMC,WAAWC,SAAS,EAAE,MAmEtBC,MA7Df,WACE,MAA0BC,mBAAS,8BAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAiBC,EAAjB,KACMC,EAAWZ,EAASa,KAAKC,MAAMN,EAAS,KACxCO,EAAUf,EAASQ,EAAqB,GAAVI,GAE9BI,EAAcC,iBAAO,MAwBrBC,EAAW,WACfC,cAAcH,EAAYI,SAC1Bb,EAAS,6BACTE,EAAS,MACTE,GAAU,IAGZ,OACE,sBAAKU,UAAU,MAAf,UACE,6BAAKf,IACL,sBAAKe,UAAU,QAAf,UACE,+BAAOT,IACP,qCACA,+BAAOG,OAGT,sBAAKM,UAAU,SAAf,WACKX,GAAY,wBAAQY,QAvCZ,WACfX,GAAU,GACVJ,EAAS,uBACiB,IAAvBS,EAAYI,UACfJ,EAAYI,QAAUG,aAAY,WAChCd,GAAU,SAAAD,GACR,OAAGA,GAAW,EAAUA,EAAU,GAClCU,IACO,QAGT,OA4BiB,mBACdR,GAAY,wBAAQY,QAzBX,WACa,OAAxBN,EAAYI,UAEfD,cAAcH,EAAYI,SAC1Bb,EAAS,cACTI,GAAU,KAoBO,kBACb,wBAAQW,QAASJ,EAAjB,0BChDOM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7b1a2213.chunk.js","sourcesContent":["import React,{ useState,useRef} from \"react\";\nimport './App.css';\n\nconst padTimer=(timer)=>{\n  return timer.toString().padStart(2,\"0\")\n  \n}\n//Current is where we keep or store datas we want to use\n//useRef is used to keep data between renders\n\nfunction App() {\n  const [title, setTitle] = useState(\"Let the count down begin !\")\n  const [timeLeft, setTimer]  = useState(10)\n  const [isRuning, setRuning] = useState(false)\n  const minutes  = padTimer(Math.floor(timeLeft/60))\n  const seconds = padTimer(timeLeft - minutes * 60)\n\n  const intervalRef = useRef(null)\n\n  const startTimer=()=>{\n    setRuning(true)\n    setTitle(\"You are doing well\")\n    if(intervalRef.current ===! null) return\n    intervalRef.current = setInterval(()=>{\n      setTimer( timeLeft=> {\n        if(timeLeft >=1) return timeLeft -1;\n        resetTimer();\n        return 0;\n      })\n      \n    },1000)\n    //console.log(intervalRef.current)\n  }\n\n  const stopTimer=()=>{\n    if(intervalRef.current === null) return\n    //console.log(intervalRef.current)\n    clearInterval(intervalRef.current)\n    setTitle(\"Keep it up\")\n    setRuning(false)\n  }\n  const resetTimer=()=>{\n    clearInterval(intervalRef.current)\n    setTitle(\"Ready to go another round\")\n    setTimer(25*60)\n    setRuning(false)\n  }\n  \n  return (\n    <div className=\"app\">\n      <h2>{title}</h2>\n      <div className=\"timer\">\n        <span>{minutes}</span>\n        <span>:</span>\n        <span>{seconds}</span>\n        \n      </div>\n      <div className=\"button\">\n         {!isRuning && <button onClick={startTimer}>Start</button>}\n        {isRuning && <button onClick={stopTimer}>Stop</button>} \n        <button onClick={resetTimer}>Reset</button>\n        \n      </div>\n      \n\n    </div>\n    \n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}